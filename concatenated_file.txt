==> ft_atoi.c <==

int	ft_atoi(const char *str)
{
	int	i;
	int	nb;
	int	sign;

	i = 0;
	nb = 0;
	sign = 1;
	while ((str[i] >= 9 && str[i] <= 13) || str[i] == 32)
		i++;
	while (str[i] == '+' || str[i] == '-')
	{
		if (str[i] == '-')
			sign = -sign;
		i++;
	}
	while (str[i] >= '0' && str[i] <= '9')
	{
		nb = (nb * 10) + (str[i] - 48);
		i++;
	}
	return (nb * sign);
}

==> ft_bzero.c <==

#include <stddef.h>

void ft_bzero(void *s, size_t n)
{
    char *str = (char*)s;
    while(n)
    {
        str[n - 1] = '\0';
        n--;
    }
}

==> ft_calloc.c <==

#include "libft.h"

void *ft_calloc(size_t nitems, size_t size)
{
    void *dest;

    dest = malloc(nitems * size);
    if (!dest)
        return (NULL);
    ft_bzero(dest, nitems * size);
    return (dest);
}

==> ft_isalnum.c <==

#include "libft.h"

int ft_isalnum(int i)
{
    return (ft_isalpha(i) || ft_isdigit(i));
}


==> ft_isalpha.c <==

#include "libft.h"

int ft_isalpha(int c)
{
    return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}

==> ft_isascii.c <==

int ft_isascii(int i)
{
    return (i >= 0 && i <= 127);
}


==> ft_isdigit.c <==

int ft_isdigit(int num)
{
	return (num >= '0' && num <= '9');
}

==> ft_isprint.c <==


int ft_isprint(int i)
{
    return (i >= 32 && i <= 126);
}

==> ft_memchr.c <==

#include <stddef.h>

void *ft_memchr(const void *str, int c, size_t n)
{
	size_t               i;
	const unsigned char *str_cp;

	i = 0;
	str_cp = (const unsigned char *) str;
	while (n - i > 0)
	{
		if (str_cp[i] == (const unsigned char) c)
			return ((void *) &str_cp[i]);
		i++;
	}
	return (NULL);
}

==> ft_memcmp.c <==

#include <stddef.h>

int ft_memcmp(const void *ptr1, const void *ptr2, size_t num)
{
    const unsigned char *ptr1_uc;
    const unsigned char *ptr2_uc;
    size_t i;

    i = 0;
    ptr1_uc = (const unsigned char*)ptr1;
    ptr2_uc = (const unsigned char*)ptr2;
    while(i < num)
    {
        if (ptr1_uc[i] != ptr2_uc[i])
            return ((int)(ptr1_uc[i] - ptr2_uc[i]));
        i++;
    }
    return (0);
}

==> ft_memcpy.c <==

#include <stddef.h>

void *ft_memcpy(void *destination, const void *source, size_t num)
{
	unsigned char *src;
	unsigned char *dest;

	src = (unsigned char *) source;
	dest = (unsigned char *) destination;
	if (src == NULL && dest == NULL)
		return (destination);
	while (num)
	{
		dest[num - 1] = src[num - 1];
		num--;
	}
	return ((void *) dest);
}

==> ft_memmove.c <==

#include <stddef.h>

void *ft_memmove(void *destination, const void *source, size_t num)
{
	unsigned char *src;
	unsigned char *dest;

	src = (unsigned char *) source;
	dest = (unsigned char *) destination;
	if (src == NULL && dest == NULL)
		return (destination);
	while (num)
	{
		dest[num - 1] = src[num - 1];
		num--;
	}
	return ((void *) dest);
}

==> ft_memset.c <==

#include <stddef.h>

void *ft_memset(void *str, int c, size_t n)
{
	unsigned char *str_cp;

	str_cp = (unsigned char *) str;
	while (n)
	{
		str_cp[n - 1] = (unsigned char)c;
		n--;
	}
	return (str);
}

==> ft_strchr.c <==

#include "libft.h"

char *ft_strchr(const char *str, int c)
{
	if (c == '\0')
		return ((char *) &str[ft_strlen(str)]);
	while (*str)
	{
		if (c == *str)
			return ((char *) str);
		str++;
	}
	return (NULL);
}

==> ft_strdup.c <==

#include "libft.h"
#include <stdlib.h>

char * ft_strdup( const char * source )
{
    char *dest;
    size_t source_len;

    source_len = ft_strlen(source) + 1;
    dest = malloc((source_len) * sizeof(char));
    if (!dest)
        return (NULL);
    ft_strlcpy(dest, source, source_len);
    return (dest);
}

==> ft_strlcat.c <==

#include "libft.h"

size_t ft_strlcat(char *dest, const char *src, unsigned int size)
{
	unsigned int	i;
	unsigned int	j;

	i = 0;
	j = 0;
	while(dest[i] && i < size)
		i++;
	while (dest[i + j] && i < size)
	{
		dest[i + j] = src[j];
		j++;
	}
	if ((i + j) < size)
		dest[i + j] = 0;
	j = ft_strlen(src);
	return(i + j);
}

==> ft_strlcpy.c <==

#include "libft.h"

size_t ft_strlcpy(char *dest, const char *src, unsigned int size)
{
	unsigned int i;

	i = 0;
	if (size == 0)
		return (ft_strlen(src));
	while (i < size - 1 && src[i] != '\0')
	{
		dest[i] = src[i];
		i++;
	}
	if (size != 0)
		dest[i] = '\0';
	return (ft_strlen(src));
}

==> ft_strlen.c <==

#include <stddef.h>

int ft_strlen(const char *str)
{
	size_t i;

	i = 0;
	while (str[i])
		i++;
	return (i);
}

==> ft_strncmp.c <==

#include <stddef.h>

int ft_strncmp(const char *first, const char *second, size_t length)
{
	size_t i;

	i = 0;
	if (length == 0)
		return (0);
	while (first[i] == second[i] && first[i] && first[i] != 0 && i < length - 1)
		i++;
	return ((unsigned char) first[i] - (unsigned char) second[i]);
}

==> ft_strnstr.c <==

#include <stddef.h>
#include <stdio.h>

char *ft_strnstr(const char *big, const char *little, size_t len)
{
	size_t i;
	size_t j;

	i = 0;
    if (!*little || !len)
		return ((char *)big);
	while (big[i] && i < len)
	{
		j = 0;
		while (big[i + j] == little[j] && i + j < len)
		{
			if (little[j + 1] == 0)
				return ((char *) &big[i]);
			j++;
		}
		i++;
	}
	return (NULL);
}

==> ft_strrchr.c <==

#include "libft.h"

char *ft_strrchr(const char *str, int c)
{
	char  *last;
	size_t i;

	i = 0;
	last = NULL;
	if (c == '\0')
		return ((char *) &str[ft_strlen(str)]);

	while (str[i])
	{
		if (str[i] == c)
			last = (char *) &str[i];
		i++;
	}
	return (last);
}

==> ft_tolower.c <==

int ft_tolower(int c)
{
    if (c >= 'A' && c <= 'Z')
        return (c + 32);
    return (c);
}

==> ft_toupper.c <==

int ft_toupper(int c)
{
    if (c >= 'a' && c <= 'z')
        return (c - 32);
    return (c);
}
